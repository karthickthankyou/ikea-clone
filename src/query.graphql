query GetProducts {
  products(limit: 10, order_by: { discount: desc_nulls_last }) {
    category
    createdAt
    discount
    id
    name
  }
}

query GetProduct($id: Int!) {
  product: products_by_pk(id: $id) {
    category
    createdAt
    discount
    id
    name
    oldPrice
    outOfStock
    price
    rating
    reviews
    description
    measurements
    subCategory
    tags
    updatedAt
    url
    images
  }
}

query SearchProducts(
  $args: search_products_args!
  $distinct_on: [products_select_column!]
  $limit: Int
  $offset: Int
  $order_by: [products_order_by!]
  $where: products_bool_exp
) {
  products_aggregate: search_products_aggregate(
    args: $args
    distinct_on: $distinct_on
    order_by: $order_by
    where: $where
  ) {
    aggregate {
      count
    }
  }
  products: search_products(
    args: $args
    distinct_on: $distinct_on
    limit: $limit
    offset: $offset
    order_by: $order_by
    where: $where
  ) {
    name
    id
    category
    subCategory
    outOfStock
    price
    images
    rating
    reviews
    discount
    oldPrice
  }
}

query FilterProducts(
  $distinct_on: [products_select_column!]
  $limit: Int
  $offset: Int
  $order_by: [products_order_by!]
  $where: products_bool_exp
) {
  products_aggregate(
    distinct_on: $distinct_on
    order_by: $order_by
    where: $where
  ) {
    aggregate {
      count
    }
  }
  products(
    distinct_on: $distinct_on
    limit: $limit
    offset: $offset
    order_by: $order_by
    where: $where
  ) {
    name
    id
    category
    subCategory
    outOfStock
    price
    images
    rating
    reviews
    discount
    oldPrice
  }
}

mutation InsertUserProductsOne($object: user_products_insert_input!) {
  insert_user_products_one(
    object: $object
    on_conflict: {
      constraint: user_products_pid_uid_key
      update_columns: [pid, type]
    }
  ) {
    createdAt
    id
    pid
    type
    uid
    updatedAt
  }
}

query GetUserProducts($uid: String!) {
  user_products(where: { uid: { _eq: $uid } }) {
    createdAt
    id
    pid
    type
    uid
    updatedAt
    product {
      name
      price
      oldPrice
      images
      outOfStock
      category
      subCategory
      rating
      reviews
    }
  }
}

mutation CompleteOrder($objects: [orders_insert_input!]!) {
  insert_orders(objects: $objects) {
    affected_rows
  }
}

query GetOrderedProducts(
  $distinct_on: [orders_select_column!]
  $limit: Int
  $offset: Int
  $order_by: [orders_order_by!]
  $where: orders_bool_exp
) {
  orders(
    distinct_on: $distinct_on
    limit: $limit
    offset: $offset
    order_by: $order_by
    where: $where
  ) {
    id
    pid
    product {
      images
      name
    }
    updatedAt
  }
  orders_aggregate(
    distinct_on: $distinct_on
    order_by: $order_by
    where: $where
  ) {
    aggregate {
      count
    }
  }
}

mutation InsertProductView($uid: String!, $pid: Int) {
  insert_views_one(object: { uid: $uid, pid: $pid }) {
    uid
    pid
    id
    created_at
    updated_at
  }
}

query GetViewedProducts($uid: String) {
  views(distinct_on: pid, limit: 12, where: { uid: { _eq: $uid } }) {
    id
    pid
    product {
      images
      name
      price
      oldPrice
    }
  }
}

mutation PostNewProduct($object: products_insert_input!) {
  insert_products_one(object: $object) {
    category
    createdAt
    id
    discount
    images
    name
    price
    oldPrice
    description
  }
}

mutation DeleteCartItems($uid: String!, $type: user_products_type_enum!) {
  delete_user_products(where: { uid: { _eq: $uid }, type: { _eq: $type } }) {
    affected_rows
  }
}

mutation InsertSupport($object: support_insert_input!) {
  insert_support_one(object: $object) {
    updated_at
    uid
    phone
    name
    location
    message
    id
    email
    created_at
    category
  }
}

query GetSupportMessages(
  $distinct_on: [support_select_column!]
  $limit: Int
  $offset: Int
  $order_by: [support_order_by!]
  $where: support_bool_exp
) {
  support_aggregate(
    distinct_on: $distinct_on
    order_by: $order_by
    where: $where
  ) {
    aggregate {
      count
    }
  }
  support(
    distinct_on: $distinct_on
    limit: $limit
    offset: $offset
    order_by: $order_by
    where: $where
  ) {
    category
    message
    id
    updated_at
  }
}
